version: 2.1

workflows:
  buildapp:
    jobs:
      - build-one-ios

jobs:
  build-one-ios:
    macos:
      xcode: 13.3 # Specify the Xcode version to use

    steps:
      - checkout

        # next four run commands to work around xcodebuild bug using private repos for swift pacakages
      - run:
          name: Use Default SCM (Work Around xCode bug)
          command : |
            sudo defaults write com.apple.dt.Xcode IDEPackageSupportUseBuiltinSCM YES

      - run:
          name: Renove ssh Key (Work Around xCode bug)
          command : |
            rm ~/.ssh/id_rsa || true

      - run:
          name: Set Known Host IPs for bitbucket (Work Around xCode bug)
          command : |
            for ip in $(dig @8.8.8.8 bitbucket.org +short); do ssh-keyscan bitbucket.org,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts || true

      - run:
          name: Set Known Host IPs for github (Work Around xCode bug)
          command : |
            for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts || true

      - run:
          name: Check Init
          command: |
            swift --version
            cat /etc/shells
            ls -la

      - restore_cache:
          keys:
            - v1-dependencies

      - save_cache:
          paths:
            - ~/Library/Caches/Homebrew

          key: v1-dependencies

      - run:
          name: Check Key
          command: |
            mkdir -p ~/cert

            echo $IOS_DISTRIBUTION_CERT > ~/cert/base64cert
            base64 -d  ~/cert/base64cert > ~/cert/ios_distribution.cer

            echo $IOS_DISTRIBUTION_P12 > ~/cert/base64p12
            base64 -d  ~/cert/base64p12 > ~/cert/ios_distribution.p12
            ls -la ~/cert

      - run:
          name: Install Key
          command: |
            security create-keychain -p test  ~/Library/Keychains/default.keychain
            security unlock-keychain -p test ~/Library/Keychains/default.keychain
            security set-keychain-settings -t 9999 -l ~/Library/Keychains/default.keychain

            security -v import .circleci/cert/apple.cer                                         -k ~/Library/Keychains/default.keychain -T /usr/bin/codesign
            security -v import ~/cert/ios_distribution.cer                                 -k ~/Library/Keychains/default.keychain -T /usr/bin/codesign
            security -v import  ~/cert/ios_distribution.p12  -t agg -P $IOS_DISTRIBUTION_P12_PASS -k ~/Library/Keychains/default.keychain -T /usr/bin/codesign
            security find-certificate -a  ~/Library/Keychains/default.keychain

            security default-keychain -s ~/Library/Keychains/default.keychain

      - run:
          name: Install Prerequisites
          command: |
            brew --cache
            brew install SwiftLint

      - run:
          name: Check Key
          command: |
             security list-keychains -d user -s ~/Library/Keychains/default.keychain

      - run:
          name: Provisioning Profile
          command: |
            cd brd-ios
            sed "s/PRODUCT_BUNDLE_IDENTIFIER = com.fabriik.one;/PRODUCT_BUNDLE_IDENTIFIER = com.fabriik.one;\                PROVISIONING_PROFILE_SPECIFIER = wallet-CNI-distribution2;\                CODE_SIGN_IDENTITY = \"iPhone Distribution\";\                CODE_SIGN_STYLE = Manual;/g"  breadwallet.xcodeproj/project.pbxproj  > breadwallet.xcodeproj/project.pbxproj.rnm
            cp breadwallet.xcodeproj/project.pbxproj.rnm breadwallet.xcodeproj/project.pbxproj

      - run:
          name: Help and Project List
          command: |
            cd brd-ios
            xcodebuild --help
            xcodebuild -project breadwallet.xcodeproj -list

      - run:
          name: Build Clean
          command: |
            cd brd-ios
            xcodebuild clean -workspace breadwallet.xcworkspace -scheme wallet | xcpretty


      - run:
          name: Create .env and local.properties and fix build.gradle
          command: |
            cd brd-ios
            BRD_ENV=.env
            touch $BRD_ENV

            echo "// PRODUCTION" >> $BRD_ENV
            echo "API_URL=$PROD_URL" >> $BRD_ENV
            echo "API_TOKEN=$PROD_TOKEN" >> $BRD_ENV
            echo "" >> $BRD_ENV

            echo "// DEVELOPMENT" >> $BRD_ENV
            echo "DEBUG_URL=$DEV_URL" >> $BRD_ENV
            echo "DEBUG_TOKEN=$DEV_TOKEN" >> $BRD_ENV
            echo "IS_TEST=true" >> $BRD_ENV
            echo "" >> $BRD_ENV

            echo "// STAGING" >> $BRD_ENV
            echo "STAGING_URL=$STAGING_URL" >> $BRD_ENV
            echo "STAGING_TOKEN=$STAGING_TOKEN" >> $BRD_ENV
            echo "" >> $BRD_ENV

      - run:
          name: Create exportOptions.plist
          command: |
            # check for config file
            if [ ! -f brd-ios/build/exportOptions.plist ]; then
                mkdir -pv brd-ios/build
                cp .circleci/config/exportOptions.plist brd-ios/build/exportOptions.plist
            fi

      - run:
          name: Build Cosmos Project
          command: |
            export ANDROID_SDK_ROOT=/usr/local/share/android-commandlinetools/cmdline-tools/latest/bin
            ./gradlew cosmos-bundled:createXCFramework --stacktrace
            ./brd-ios/scripts/cosmos_apple_silicon.sh

      - run:
          name: Set Versions
          command: |
            mainBundleShortVersionString=4.11.0
            mainBundleVersion=${CIRCLE_BUILD_NUM}

            cd brd-ios
            agvtool new-marketing-version ${mainBundleShortVersionString}
            agvtool new-version ${mainBundleVersion}

      - run:
          name: Run Build
          command: |
            security default-keychain
            security set-keychain-settings -lut 9999
            security unlock-keychain -p test ~/Library/Keychains/default.keychain

            cd brd-ios

            echo "Build breadwallet version ${mainBundleShortVersionString} build number ${mainBundleVersion}"
            set -o pipefail
            xcodebuild -workspace breadwallet.xcworkspace -scheme "wallet" archive -archivePath build/breadwallet.xcarchive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
